{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"第二周：数据预处理与特征工程基础\"\n",
        "author: \"机器学习\"\n",
        "format:\n",
        "    html:\n",
        "        toc: true\n",
        "        toc-depth: 4\n",
        "        toc-title: \"目录\"\n",
        "        number-sections: true\n",
        "        theme: cosmo\n",
        "        code-fold: true\n",
        "        code-tools: true\n",
        "        highlight-style: github\n",
        "---\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        ":::{.callout-tip}\n",
        "## 本周学习目标\n",
        "- 掌握使用 `Pandas` 进行数据加载和探索的方法\n",
        "- 掌握常见的数据清洗方法\n",
        "- 理解特征工程的基本概念和方法\n",
        "- 掌握使用 `Scikit-learn` 进行数据预处理和特征工程\n",
        "- 能够使用 AI 辅助编程工具完成编程练习\n",
        "- 了解小组项目一的目标和要求\n",
        ":::\n",
        "\n",
        "# 第一次课：数据预处理与特征工程基础 {.unnumbered}\n",
        "\n",
        "## 数据加载与探索 {#sec-data-loading}\n",
        "\n",
        "### 1. Pandas 读取数据\n",
        "\n",
        ":::{.callout-note}\n",
        "## 常用函数\n",
        "- `pd.read_csv()`: CSV文件读取\n",
        "- `pd.read_excel()`: Excel文件读取\n",
        "- `pd.read_json()`: JSON文件读取\n",
        "- `pd.read_sql()`: SQL数据库读取\n",
        ":::\n",
        "\n",
        "#### 重要参数说明\n",
        "\n",
        "| 参数名 | 说明 | 默认值 |\n",
        "|--------|------|---------|\n",
        "| `filepath_or_buffer` | 文件路径 | 必需 |\n",
        "| `sep` 或 `delimiter` | 分隔符 | `,` |\n",
        "| `header` | 列名行 | `0` |\n",
        "| `index_col` | 索引列 | `None` |\n",
        "| `encoding` | 文件编码 | `None` |\n",
        "\n",
        ":::{.callout-warning}\n",
        "如果读取 CSV 文件出现乱码，请尝试更换 `encoding` 参数（如 `utf-8`, `gbk`）\n",
        ":::\n",
        "\n",
        "### 2. 数据查看方法\n",
        "\n",
        "#### 基本查看\n",
        "- `df.head(n)`: 查看前 n 行\n",
        "- `df.tail(n)`: 查看后 n 行\n",
        "- `df.shape`: 数据维度\n",
        "- `df.columns`: 列名列表\n",
        "- `df.index`: 索引信息\n",
        "\n",
        "#### 详细信息\n",
        "- `df.info()`: 数据摘要信息\n",
        "- `df.describe()`: 统计描述\n",
        "- `df.dtypes`: 数据类型\n",
        "\n",
        "### 3. 数据查看示例\n"
      ],
      "id": "f76d25be"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: data-exploration\n",
        "#| echo: true\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "# 创建示例数据\n",
        "data = {\n",
        "    '年龄': [25, 30, 35, 40, 45],\n",
        "    '收入': [5000, 8000, 12000, 15000, 20000],\n",
        "    '学历': ['本科', '硕士', '博士', '本科', '硕士']\n",
        "}\n",
        "df = pd.DataFrame(data)\n",
        "\n",
        "# 基本信息\n",
        "print(\"数据基本信息：\")\n",
        "print(df.info())\n",
        "\n",
        "# 统计描述\n",
        "print(\"\\n数据统计描述：\")\n",
        "print(df.describe())\n",
        "\n",
        "# 前几行数据\n",
        "print(\"\\n数据预览：\")\n",
        "print(df.head())"
      ],
      "id": "data-exploration",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## 内容概要\n",
        "\n",
        "### 1. 数据加载与探索\n",
        "\n",
        "#### 1.1 使用 Pandas 读取数据\n",
        "\n",
        "*   **常用函数:** `pd.read_csv()`, `pd.read_excel()` 等\n",
        "*   **常用参数:**\n",
        "    *   `filepath_or_buffer`:  文件路径 (必需)\n",
        "    *   `sep` 或 `delimiter`:  分隔符 (默认为 `,`)\n",
        "    *   `header`:  列名行 (默认为 `0`)\n",
        "    *   `index_col`:  索引列\n",
        "    *   `encoding`:  文件编码 (例如 `utf-8`, `gbk`)\n",
        "\n",
        "    **注意:**  如果读取 CSV 文件出现乱码，可以尝试更换 `encoding` 参数。\n",
        "\n",
        "#### 1.2 数据查看\n",
        "\n",
        "*   `df.head(n)`:  查看前 `n` 行\n",
        "*   `df.tail(n)`:  查看后 `n` 行\n",
        "*   `df.info()`:  查看数据摘要信息 (**重要**)\n",
        "*   `df.describe()`:  查看数值列统计信息\n",
        "*   `df.shape`, `df.columns`, `df.index`, `df.dtypes`:  查看数据结构信息\n",
        "\n",
        "### 2. 数据清洗\n",
        "\n",
        "## 数据清洗 {#sec-data-cleaning}\n",
        "\n",
        "### 1. 缺失值处理\n",
        "\n",
        ":::{.callout-important}\n",
        "缺失值处理是数据清洗中最常见的任务之一。选择合适的处理策略对后续分析至关重要。\n",
        ":::\n",
        "\n",
        "#### 1.1 检测缺失值\n"
      ],
      "id": "ae777724"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: missing-value-detection\n",
        "#| echo: true\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import missingno as msno\n",
        "\n",
        "# 创建示例数据\n",
        "data = {'A': [1, np.nan, 3, np.nan, 5],\n",
        "        'B': ['x', 'y', np.nan, 'z', 'x']}\n",
        "df = pd.DataFrame(data)\n",
        "\n",
        "# 检查缺失值\n",
        "print(\"缺失值统计：\")\n",
        "print(df.isnull().sum())\n",
        "\n",
        "# 缺失值可视化\n",
        "msno.matrix(df)"
      ],
      "id": "missing-value-detection",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### 1.2 处理策略\n",
        "\n",
        "##### 删除法\n",
        "```python\n",
        "# 删除包含缺失值的行\n",
        "df.dropna()\n",
        "```\n",
        "\n",
        ":::{.callout-warning}\n",
        "删除法可能会损失大量有用信息，请谨慎使用\n",
        ":::\n",
        "\n",
        "##### 填充法\n",
        "```python\n",
        "# 固定值填充\n",
        "df.fillna(0)\n",
        "\n",
        "# 均值填充\n",
        "df.fillna(df.mean())\n",
        "```\n",
        "\n",
        "##### SimpleImputer填充\n"
      ],
      "id": "e93f59d3"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: simple-imputer\n",
        "#| echo: true\n",
        "\n",
        "from sklearn.impute import SimpleImputer\n",
        "\n",
        "# 创建示例数据\n",
        "data = {'数值特征': [1, 2, np.nan, 4, 5, np.nan],\n",
        "        '类别特征': ['A', 'B', 'C', np.nan, 'A', 'B']}\n",
        "df = pd.DataFrame(data)\n",
        "\n",
        "# 均值填充\n",
        "imputer = SimpleImputer(strategy='mean')\n",
        "df['数值特征_filled'] = imputer.fit_transform(df[['数值特征']])\n",
        "\n",
        "# 众数填充\n",
        "imputer = SimpleImputer(strategy='most_frequent')\n",
        "df['类别特征_filled'] = imputer.fit_transform(df[['类别特征']])\n",
        "\n",
        "print(df)"
      ],
      "id": "simple-imputer",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### 2. 异常值处理\n",
        "\n",
        "#### 2.1 检测方法\n",
        "\n",
        "##### 箱线图法\n",
        "```python\n",
        "import seaborn as sns\n",
        "sns.boxplot(data=df['column'])\n",
        "```\n",
        "\n",
        "##### Z-score法\n",
        "```python\n",
        "from scipy import stats\n",
        "z_scores = stats.zscore(df['column'])\n",
        "```\n",
        "\n",
        "##### IQR法\n",
        "```python\n",
        "Q1 = df['column'].quantile(0.25)\n",
        "Q3 = df['column'].quantile(0.75)\n",
        "IQR = Q3 - Q1\n",
        "```\n",
        "\n",
        "#### 2.2 处理策略\n",
        "\n",
        ":::{.callout-note}\n",
        "## 常用处理方法\n",
        "1. 删除异常值（适用于异常值较少且确定是错误数据）\n",
        "2. 替换为边界值（适用于需要保留数据量的情况）\n",
        "3. 视为缺失值（可以使用缺失值处理方法）\n",
        "4. 保留不处理（如果异常值可能包含有用信息）\n",
        ":::\n",
        "\n",
        "### 3. 特征工程基础\n",
        "\n",
        "#### 3.1 数值特征处理\n",
        "\n",
        ":::{.callout-tip}\n",
        "## 为什么需要特征缩放？\n",
        "特征缩放可以：\n",
        "1. 消除特征之间的量纲差异\n",
        "2. 加快模型收敛速度\n",
        "3. 提高模型精度\n",
        ":::\n",
        "\n",
        "#### 1.1 特征缩放方法\n",
        "\n",
        "##### 标准化 (StandardScaler)\n",
        "将特征转换为均值为0，标准差为1的分布。\n"
      ],
      "id": "2170fc3a"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: standardization\n",
        "#| echo: true\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "# 创建示例数据\n",
        "data = {'特征': [10, 20, 30, 40, 50]}\n",
        "df = pd.DataFrame(data)\n",
        "\n",
        "# 标准化\n",
        "scaler = StandardScaler()\n",
        "df['特征_标准化'] = scaler.fit_transform(df[['特征']])\n",
        "\n",
        "print(df)\n",
        "print(\"\\n标准化后的统计信息：\")\n",
        "print(df['特征_标准化'].describe())"
      ],
      "id": "standardization",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "##### 归一化 (MinMaxScaler)\n",
        "将特征缩放到[0,1]区间。\n"
      ],
      "id": "85d4e4e5"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: normalization\n",
        "#| echo: true\n",
        "\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "\n",
        "# 使用相同的示例数据\n",
        "# 归一化\n",
        "scaler = MinMaxScaler()\n",
        "df['特征_归一化'] = scaler.fit_transform(df[['特征']])\n",
        "\n",
        "print(df)\n",
        "print(\"\\n归一化后的统计信息：\")\n",
        "print(df['特征_归一化'].describe())"
      ],
      "id": "normalization",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### 1.2 特征变换方法\n",
        "\n",
        "##### 多项式特征\n"
      ],
      "id": "4043b247"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: polynomial\n",
        "#| echo: true\n",
        "\n",
        "from sklearn.preprocessing import PolynomialFeatures\n",
        "\n",
        "# 创建示例数据\n",
        "X = np.array([[1], [2], [3], [4]])\n",
        "\n",
        "# 创建2次多项式特征\n",
        "poly = PolynomialFeatures(degree=2, include_bias=False)\n",
        "X_poly = poly.fit_transform(X)\n",
        "\n",
        "print(\"原始特征：\\n\", X)\n",
        "print(\"\\n多项式特征：\\n\", X_poly)"
      ],
      "id": "polynomial",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "##### 对数变换\n"
      ],
      "id": "2e305cf9"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: log-transform\n",
        "#| echo: true\n",
        "\n",
        "# 创建长尾分布数据\n",
        "np.random.seed(42)\n",
        "data = np.exp(np.random.normal(0, 1, 1000))\n",
        "\n",
        "# 对数变换\n",
        "log_data = np.log1p(data)\n",
        "\n",
        "print(\"原始数据统计：\")\n",
        "print(pd.Series(data).describe())\n",
        "print(\"\\n对数变换后统计：\")\n",
        "print(pd.Series(log_data).describe())"
      ],
      "id": "log-transform",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "##### Box-Cox变换\n"
      ],
      "id": "705c81b0"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: box-cox\n",
        "#| echo: true\n",
        "\n",
        "from sklearn.preprocessing import PowerTransformer\n",
        "\n",
        "# 创建偏态数据\n",
        "data = np.random.lognormal(0, 1, 1000)\n",
        "\n",
        "# Box-Cox变换\n",
        "pt = PowerTransformer(method='box-cox')\n",
        "data_transformed = pt.fit_transform(data.reshape(-1, 1))\n",
        "\n",
        "print(\"变换后的偏度：\", stats.skew(data_transformed))"
      ],
      "id": "box-cox",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### 2. 类别特征处理\n",
        "\n",
        "#### 2.1 编码方法对比\n",
        "\n",
        "| 编码方法 | 适用场景 | 优点 | 缺点 |\n",
        "|----------|----------|------|------|\n",
        "| 独热编码 | 无序类别 | 不引入大小关系 | 特征维度增加 |\n",
        "| 标签编码 | 有序类别 | 维度不变 | 引入大小关系 |\n",
        "| 目标编码 | 高基数类别 | 考虑目标值关系 | 可能过拟合 |\n",
        "\n",
        "#### 2.2 编码示例\n",
        "\n",
        "##### 独热编码\n"
      ],
      "id": "bbc5a533"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: onehot\n",
        "#| echo: true\n",
        "\n",
        "import pandas as pd\n",
        "from sklearn.preprocessing import OneHotEncoder\n",
        "\n",
        "# 创建示例数据\n",
        "data = {'城市': ['北京', '上海', '广州', '北京', '深圳']}\n",
        "df = pd.DataFrame(data)\n",
        "\n",
        "# 方法1：pandas get_dummies\n",
        "df_dummies = pd.get_dummies(df, columns=['城市'])\n",
        "print(\"pandas get_dummies结果：\")\n",
        "print(df_dummies)\n",
        "\n",
        "# 方法2：OneHotEncoder\n",
        "encoder = OneHotEncoder(sparse_output=False)\n",
        "encoded = encoder.fit_transform(df[['城市']])\n",
        "df_encoded = pd.DataFrame(\n",
        "    encoded,\n",
        "    columns=encoder.get_feature_names_out(['城市'])\n",
        ")\n",
        "print(\"\\nOneHotEncoder结果：\")\n",
        "print(df_encoded)"
      ],
      "id": "onehot",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "##### 标签编码\n"
      ],
      "id": "9a6df4d9"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: label\n",
        "#| echo: true\n",
        "\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "\n",
        "# 创建示例数据\n",
        "data = {'教育': ['高中', '本科', '硕士', '博士', '本科']}\n",
        "df = pd.DataFrame(data)\n",
        "\n",
        "# 标签编码\n",
        "encoder = LabelEncoder()\n",
        "df['教育_编码'] = encoder.fit_transform(df['教育'])\n",
        "\n",
        "print(\"原始数据：\")\n",
        "print(df)\n",
        "print(\"\\n编码映射：\")\n",
        "for i, label in enumerate(encoder.classes_):\n",
        "    print(f\"{label}: {i}\")"
      ],
      "id": "label",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "##### 序数编码\n"
      ],
      "id": "2210e4ae"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: ordinal\n",
        "#| echo: true\n",
        "\n",
        "from sklearn.preprocessing import OrdinalEncoder\n",
        "\n",
        "# 创建示例数据\n",
        "data = {'级别': ['低', '中', '高', '中', '低']}\n",
        "df = pd.DataFrame(data)\n",
        "\n",
        "# 定义类别顺序\n",
        "categories = [['低', '中', '高']]\n",
        "\n",
        "# 序数编码\n",
        "encoder = OrdinalEncoder(categories=categories)\n",
        "df['级别_编码'] = encoder.fit_transform(df[['级别']])\n",
        "\n",
        "print(df)"
      ],
      "id": "ordinal",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### 4. `Scikit-learn` 数据预处理和特征工程常用模块\n",
        "\n",
        "*   `sklearn.preprocessing`:  提供了各种数据预处理和特征工程的函数和类，例如：\n",
        "    *   `StandardScaler`, `MinMaxScaler`, `RobustScaler`, `MaxAbsScaler` (特征缩放)。\n",
        "    *   `PolynomialFeatures`, `PowerTransformer` (特征转换)。\n",
        "    *   `OneHotEncoder`, `LabelEncoder`, `OrdinalEncoder` (类别特征编码)。\n",
        "    *   `SimpleImputer` (缺失值填充)。\n",
        "*   `sklearn.impute`:  提供了缺失值填充的类，例如 `SimpleImputer`, `KNNImputer` (KNN 填充), `IterativeImputer` (迭代填充)。\n",
        "*   `sklearn.feature_selection`:  提供了特征选择的类 (下周讲解)。\n",
        "\n",
        "    ::: callout-note\n",
        "    ## 熟练使用 Scikit-learn\n",
        "    可以高效地进行数据预处理和特征工程。\n",
        "    :::\n",
        "\n",
        "## 小组项目一：电商用户行为数据探索与预处理 {#sec-group-project}\n",
        "\n",
        ":::{.callout-important}\n",
        "## 项目概述\n",
        "本项目旨在通过分析电商平台的用户行为数据，了解用户兴趣偏好和购买行为模式，为个性化推荐、精准营销、用户增长等提供数据支持。\n",
        ":::\n",
        "\n",
        "### 1. 数据集说明\n",
        "\n",
        "#### 示例数据集\n",
        "\n",
        "[阿里巴巴天池 - 淘宝用户行为数据](https://tianchi.aliyun.com/dataset/dataDetail?dataId=649)\n",
        "\n",
        "数据字段说明：\n",
        "\n",
        "| 字段名 | 说明 | 示例 |\n",
        "|--------|------|------|\n",
        "| user_id | 用户ID | 123456 |\n",
        "| item_id | 商品ID | 284528 |\n",
        "| category_id | 商品类目ID | 4756 |\n",
        "| behavior_type | 行为类型 | pv, cart, fav, buy |\n",
        "| timestamp | 行为时间 | 2017-11-25 13:00:00 |\n",
        "\n",
        "#### 数据要求\n",
        "\n",
        "- 鼓励学生小组自主选择数据集\n",
        "- 建议选择电商或零售行业的用户行为数据\n",
        "- 数据量应适中，特征维度不低于10个\n",
        "- 具有一定的分类难度\n",
        "- 各小组应选择不同数据集，提高多样性\n",
        "\n",
        "### 2. 项目任务\n",
        "\n",
        "#### 2.1 数据探索 (EDA)\n",
        "\n",
        "1. 基础分析\n",
        "   - 加载数据集\n",
        "   - 查看数据基本信息\n",
        "   - 检查数据质量（缺失值、异常值等）\n",
        "\n",
        "2. 行为分析\n",
        "   - 用户行为类型分布\n",
        "   - 时间分布特征\n",
        "   - 用户活跃度分析\n",
        "   - 商品热度分析\n",
        "\n",
        "3. 可视化展示\n",
        "   - 用户行为时间序列图\n",
        "   - 商品销量排行榜\n",
        "   - 用户行为转化漏斗\n",
        "   - 类目分布饼图\n",
        "\n",
        "#### 2.2 数据预处理\n",
        "\n",
        "1. 数据清洗\n",
        "   - 处理缺失值\n",
        "   - 处理异常值\n",
        "   - 处理重复数据\n",
        "   - 数据格式统一\n",
        "\n",
        "2. 特征工程\n",
        "   - 用户特征构建\n",
        "     * 点击次数\n",
        "     * 购买次数\n",
        "     * 收藏次数\n",
        "     * 加购次数\n",
        "     * 活跃天数\n",
        "   - 商品特征构建\n",
        "     * 被点击次数\n",
        "     * 被购买次数\n",
        "     * 转化率\n",
        "   - 时间特征构建\n",
        "     * 小时\n",
        "     * 星期\n",
        "     * 月份\n",
        "\n",
        "### 3. 提交要求\n",
        "\n",
        ":::{.callout-note}\n",
        "## 提交内容\n",
        "1. 预处理后的数据集（CSV格式）\n",
        "2. 完整的分析代码（Jupyter Notebook）\n",
        "   - 数据探索\n",
        "   - 数据清洗\n",
        "   - 特征工程\n",
        "   - 代码注释\n",
        "3. 分析报告\n",
        "   - 数据理解\n",
        "   - 预处理策略\n",
        "   - 特征构建说明\n",
        "   - 发现的问题和解决方案\n",
        "4. 小组分工说明（可选）\n",
        ":::\n",
        "\n",
        "### 4. 评分标准\n",
        "\n",
        "| 评分项 | 权重 | 评分要点 |\n",
        "|--------|------|----------|\n",
        "| 数据探索 | 30% | 探索深度、可视化效果、发现洞察 |\n",
        "| 数据清洗 | 30% | 清洗完整性、处理合理性 |\n",
        "| 特征工程 | 30% | 特征创新性、工程合理性 |\n",
        "| 代码质量 | 10% | 代码规范性、注释完整性 |\n",
        "\n",
        "## 相关资源 {#sec-resources}\n",
        "\n",
        "### 1. 官方文档\n",
        "- [Pandas 官方文档](https://pandas.pydata.org/docs/)\n",
        "- [Scikit-learn 官方文档](https://scikit-learn.org/stable/)\n",
        "- [Scikit-learn Preprocessing 模块](https://scikit-learn.org/stable/modules/preprocessing.html)\n",
        "- [Scikit-learn Impute 模块](https://scikit-learn.org/stable/modules/impute.html)\n",
        "\n",
        "### 2. 推荐书籍\n",
        "- [Python Data Science Handbook](https://jakevdp.github.io/PythonDataScienceHandbook/)\n",
        "  * Chapter 3: Data Manipulation with Pandas\n",
        "  * Chapter 4: Visualization with Matplotlib\n",
        "  * Chapter 5: Machine Learning\n",
        "- [Hands-On Machine Learning with Scikit-Learn](https://www.oreilly.com/library/view/hands-on-machine-learning/9781098125973/)\n",
        "  * Chapter 2: End-to-End Machine Learning Project\n",
        "  * Chapter 3: Classification\n",
        "\n",
        "### 3. 数据集\n",
        "- [阿里巴巴天池 - 淘宝用户行为数据](https://tianchi.aliyun.com/dataset/dataDetail?dataId=649)\n",
        "- [Kaggle - E-Commerce Data](https://www.kaggle.com/datasets/tag/e-commerce)\n",
        "- [UCI Machine Learning Repository](https://archive.ics.uci.edu/ml/datasets.php)\n",
        "\n",
        "# 第二次课：项目实践与指导 {.unnumbered}\n",
        "\n",
        ":::{.callout-tip}\n",
        "## 课程安排\n",
        "本次课程主要以小组项目实践为主，教师将进行巡回指导，帮助学生解决在数据分析和代码实现过程中遇到的问题。\n",
        ":::\n",
        "\n",
        "## 实践环节安排 {#sec-practice}\n",
        "\n",
        "### 1. 项目开发指导\n",
        "\n",
        "#### 代码实现技巧\n",
        "- 使用 Jupyter Notebook 进行交互式开发\n",
        "- 合理组织代码结构\n",
        "- 编写清晰的注释\n",
        "- 使用版本控制管理代码\n",
        "\n",
        "#### 数据分析方法\n",
        "- 数据质量评估\n",
        "- 特征相关性分析\n",
        "- 数据分布可视化\n",
        "- 异常检测方法\n",
        "\n",
        "### 2. 常见问题解答\n",
        "\n",
        "#### 数据处理相关\n",
        "- 大规模数据处理优化\n",
        "- 内存使用优化\n",
        "- 数据类型转换\n",
        "- 时间序列处理\n",
        "\n",
        "#### 特征工程相关\n",
        "- 特征选择方法\n",
        "- 特征组合策略\n",
        "- 类别特征处理\n",
        "- 时间特征提取\n",
        "\n",
        "## 课后作业 {#sec-homework}\n",
        "\n",
        ":::{.callout-note}\n",
        "## 作业要求\n",
        "\n",
        "1. 完善小组项目代码\n",
        "   - 优化数据预处理流程\n",
        "   - 添加必要的注释\n",
        "   - 确保代码可重复执行\n",
        "\n",
        "2. 准备项目文档\n",
        "   - 数据处理流程说明\n",
        "   - 特征工程方法说明\n",
        "   - 遇到的问题和解决方案\n",
        "   - 对数据的分析发现\n",
        "\n",
        "3. 课前提交\n",
        "   - 预处理后的数据集\n",
        "   - 完整的分析代码\n",
        "   - 项目文档\n",
        "\n",
        "4. 预习下周内容\n",
        "   - 特征选择方法\n",
        "   - 降维技术\n",
        ":::\n",
        "\n",
        "## 参考代码 {#sec-code-examples}\n",
        "\n",
        "### 1. 数据加载与探索\n",
        "\n",
        "```python\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "# 加载数据\n",
        "df = pd.read_csv('user_behavior.csv')\n",
        "\n",
        "# 数据基本信息\n",
        "print(\"数据基本信息：\")\n",
        "print(df.info())\n",
        "\n",
        "# 查看数据分布\n",
        "print(\"\\n数据统计描述：\")\n",
        "print(df.describe())\n",
        "\n",
        "# 检查缺失值\n",
        "print(\"\\n缺失值统计：\")\n",
        "print(df.isnull().sum())\n",
        "\n",
        "# 可视化用户行为分布\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.countplot(data=df, x='behavior_type')\n",
        "plt.title('用户行为类型分布')\n",
        "plt.show()\n",
        "```\n",
        "\n",
        "### 2. 特征工程示例\n",
        "\n",
        "```python\n",
        "# 时间特征提取\n",
        "df['timestamp'] = pd.to_datetime(df['timestamp'])\n",
        "df['hour'] = df['timestamp'].dt.hour\n",
        "df['weekday'] = df['timestamp'].dt.weekday\n",
        "df['month'] = df['timestamp'].dt.month\n",
        "\n",
        "# 用户特征聚合\n",
        "user_features = df.groupby('user_id').agg({\n",
        "    'item_id': 'count',                     # 总行为次数\n",
        "    'behavior_type': lambda x: (x == 'buy').sum()  # 购买次数\n",
        "}).rename(columns={\n",
        "    'item_id': 'total_behaviors',\n",
        "    'behavior_type': 'purchase_count'\n",
        "})\n",
        "\n",
        "# 商品特征聚合\n",
        "item_features = df.groupby('item_id').agg({\n",
        "    'user_id': 'count',                     # 被操作次数\n",
        "    'behavior_type': lambda x: (x == 'buy').sum()  # 被购买次数\n",
        "}).rename(columns={\n",
        "    'user_id': 'total_interactions',\n",
        "    'behavior_type': 'total_purchases'\n",
        "})\n",
        "\n",
        "# 计算转化率\n",
        "item_features['conversion_rate'] = item_features['total_purchases'] / item_features['total_interactions']\n",
        "```\n",
        "\n",
        "### 3. 数据可视化\n",
        "\n",
        "```python\n",
        "# 设置中文字体\n",
        "plt.rcParams['font.sans-serif'] = ['SimHei']\n",
        "plt.rcParams['axes.unicode_minus'] = False\n",
        "\n",
        "# 用户行为时间分布\n",
        "plt.figure(figsize=(15, 5))\n",
        "\n",
        "plt.subplot(1, 2, 1)\n",
        "df['hour'].value_counts().sort_index().plot(kind='bar')\n",
        "plt.title('小时分布')\n",
        "plt.xlabel('小时')\n",
        "plt.ylabel('行为次数')\n",
        "\n",
        "plt.subplot(1, 2, 2)\n",
        "df['weekday'].value_counts().sort_index().plot(kind='bar')\n",
        "plt.title('星期分布')\n",
        "plt.xlabel('星期')\n",
        "plt.ylabel('行为次数')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "# 用户行为转化漏斗\n",
        "behavior_counts = df['behavior_type'].value_counts()\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.bar(behavior_counts.index, behavior_counts.values)\n",
        "plt.title('用户行为转化漏斗')\n",
        "plt.xlabel('行为类型')\n",
        "plt.ylabel('次数')\n",
        "plt.show()\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "---"
      ],
      "id": "23ce734b"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/Users/wangxq/.pyenv/versions/3.9.13/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}