---
title: "第一周：课堂练习与实验"
subtitle: "环境搭建、Python 基础与 Jupyter 初体验"
---

本周的练习旨在帮助你熟悉课程所需的基础环境和工具，并通过 AI 辅助的方式快速回顾 Python 基础知识。

## 练习 1: 环境检查与 Hello World

**目标:** 确认你的 Python 环境 (Anaconda/Miniconda) 和代码编辑器 (VS Code/Cursor) 已正确安装和配置。

1.  **打开终端 (Terminal):**
    *   在 Windows 上，可以搜索 "Anaconda Prompt"。
    *   在 macOS 或 Linux 上，打开系统自带的终端。
2.  **检查 Conda:** 在终端输入 `conda --version` 并回车。如果显示 Conda 版本号，说明安装成功。
3.  **检查 Python:** 在终端输入 `python --version` 并回车。确认 Python 版本（通常是 3.x）。
4.  **启动 VS Code (或 Cursor):**
5.  **安装 Python 扩展:** 在 VS Code 的扩展市场搜索 "Python" (来自 Microsoft) 并安装。
6.  **安装 Jupyter 扩展:** 搜索 "Jupyter" (来自 Microsoft) 并安装。
7.  **创建第一个 Jupyter Notebook:**
    *   在 VS Code 中，通过 `文件 > 新建文件` 创建一个新文件。
    *   将文件保存为 `week1_hello.ipynb`。
    *   在第一个单元格 (Cell) 中输入以下代码：
        ```python
        print("Hello, Machine Learning World!")
        message = "环境配置成功！"
        print(message)
        ```
    *   按 `Shift + Enter` (或点击单元格左侧的运行按钮) 执行单元格。
    *   **确认:** 你应该能看到代码下输出了 "Hello, Machine Learning World!" 和 "环境配置成功！"。

## 练习 2: AI 辅助 Python 基础回顾

**目标:** 利用 AI 编程助手 (如 GitHub Copilot, 通义灵码, Cursor 内置 AI 等) 快速复习 Python 基础语法。

**说明:** 在 `week1_hello.ipynb` 文件中继续添加新的单元格来完成以下练习。尝试使用 AI 工具生成代码、解释代码或回答你的问题。

1.  **变量与数据类型:**
    *   **任务:** 创建变量分别存储你的姓名 (字符串)、年龄 (整数)、期望的薪资 (浮点数) 以及是否喜欢编程 (布尔值)。打印出这些变量的类型和值。
    *   **AI 提示示例:** `"创建一个名为 name 的字符串变量并赋值为 '张三'"`，`"如何查看变量 age 的数据类型？"`
2.  **基本运算符:**
    *   **任务:** 计算 `(10 + 5) * 3 / 2` 的结果。判断你的年龄是否大于 18 且小于 30。
    *   **AI 提示示例:** `"计算 (10 + 5) * 3 / 2"`，`"写一个 Python 表达式判断变量 age 是否在 18 和 30 之间 (不包括 30)"`
3.  **数据结构 (列表 List):**
    *   **任务:** 创建一个包含你最喜欢的三门课程名称的列表。访问列表的第一个元素。向列表末尾添加一门新的课程。
    *   **AI 提示示例:** `"创建一个包含 '数学', '英语', '物理' 的 Python 列表"`，`"如何获取列表 my_list 的第一个元素？"`，`"如何在列表 my_list 末尾添加元素 '化学'？"`
4.  **数据结构 (字典 Dict):**
    *   **任务:** 创建一个字典，存储你的姓名和年龄信息 (键分别为 'name' 和 'age')。访问字典中 'name' 对应的值。向字典中添加一个新的键值对，表示你的专业 (键为 'major')。
    *   **AI 提示示例:** `"创建一个 Python 字典，包含键 'name' 值为 '李四'，键 'age' 值为 20"`，`"如何获取字典 my_dict 中键 'name' 对应的值？"`，`"如何向字典 my_dict 添加键 'major' 值为 '计算机科学'？"`
5.  **控制流 (if-else):**
    *   **任务:** 判断你的年龄是否大于等于 18 岁，如果是，则打印 "成年人"，否则打印 "未成年人"。
    *   **AI 提示示例:** `"写一个 Python if-else 语句，判断 age 是否大于等于 18"`
6.  **控制流 (for 循环):**
    *   **任务:** 遍历你之前创建的课程列表，并打印出每门课程的名称。
    *   **AI 提示示例:** `"写一个 Python for 循环，遍历列表 course_list 并打印每个元素"`
7.  **函数 (Function):**
    *   **任务:** 定义一个名为 `greet` 的函数，接收一个参数 `name`，函数内部打印 "你好, [name]!"。调用这个函数并传入你的姓名。
    *   **AI 提示示例:** `"定义一个名为 greet 的 Python 函数，接收参数 name，并打印 '你好, ' + name + '!'"`, `"如何调用函数 greet 并传入参数 '王五'？"`

## 练习 3: Jupyter Notebook 基本操作

**目标:** 熟悉 Jupyter Notebook 的基本操作。

1.  **单元格类型:**
    *   在 `week1_hello.ipynb` 中，创建一个新的代码单元格 (Code Cell) 和一个新的 Markdown 单元格 (Markdown Cell)。
    *   **切换类型:** 尝试将代码单元格切换为 Markdown，再切换回来。（提示：可以使用工具栏或快捷键）。
2.  **Markdown 语法:**
    *   在 Markdown 单元格中，尝试使用以下语法编写一些内容：
        *   `# 一级标题`
        *   `## 二级标题`
        *   `*斜体文字*` 或 `_斜体文字_`
        *   `**粗体文字**` 或 `__粗体文字__`
        *   `- 无序列表项 1`
        *   `- 无序列表项 2`
        *   `1. 有序列表项 1`
        *   `2. 有序列表项 2`
        *   `[链接文字](https://www.google.com)`
    *   按 `Shift + Enter` 渲染 Markdown 单元格，查看效果。
3.  **单元格操作:**
    *   尝试在不同单元格之间移动。
    *   插入新的单元格（在当前单元格上方或下方）。
    *   复制、剪切、粘贴单元格。
    *   删除单元格。
    *   运行所有单元格。
    *   中断内核运行（如果某个单元格卡住）。
    *   重启内核。

**完成以上练习后，你应该对课程所需的环境和工具有了基本的了解和操作能力。**