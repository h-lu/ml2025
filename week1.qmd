# 第一周：机器学习导论与Python环境搭建

::: {.callout-tip}
## 本周学习目标
- 了解机器学习的核心概念和类型 (监督学习、无监督学习、强化学习)
- 理解机器学习与传统统计分析、数据挖掘的区别与联系
- 认识机器学习和生成式AI 在商业领域的应用前景
- **掌握 Python 和 VS Code 的安装配置，包括 Python 解释器、VS Code 编辑器、Python 插件、虚拟环境 `venv` 的使用**
- 初步体验 AI 辅助编程工具，如 GitHub Copilot, 通义灵码, Cline
:::

## 第一次课：机器学习导论与Python环境搭建

### 1. 机器学习导论

::: {.callout-note}
## 什么是机器学习
无需显式编程，让计算机从数据中学习规律和知识。

**与传统编程的区别：** 传统编程 (显式规则) vs. 机器学习 (从数据中学习规则)。
:::

::: {.callout-important}
## 机器学习的核心概念

#### 监督学习 (Supervised Learning)
从带有标签的数据中学习，用于分类和回归任务。

- **示例：** 垃圾邮件识别 (分类)、房价预测 (回归)

#### 无监督学习 (Unsupervised Learning)
从无标签数据中学习数据结构和模式，用于聚类、降维、关联规则挖掘等任务。

- **示例：** 用户分群 (聚类)、商品推荐 (关联规则)

#### 强化学习 (Reinforcement Learning)
通过与环境交互学习最优策略，以获得最大奖励。

- **示例：** 游戏 AI、自动驾驶
:::

::: {.callout-note}
## 机器学习与相关学科

#### 机器学习 vs. 传统统计分析
- **侧重点不同：** 统计分析 (解释性、推断) vs. 机器学习 (预测性、性能)
- **方法论差异：** 统计分析 (模型假设、参数估计) vs. 机器学习 (算法迭代、模型优化)

#### 机器学习 vs. 数据挖掘
- **目标相似：** 从数据中发现知识和模式
- **侧重面不同：** 数据挖掘 (更侧重数据预处理、模式发现) vs. 机器学习 (更侧重模型构建、预测和决策)
:::

::: {.callout-tip}
## 机器学习和生成式AI 的商业应用案例

1. **精准营销：** 用户画像、个性化推荐、广告投放优化
2. **风险管理：** 信用评分、欺诈检测、风险预警
3. **智能客服：** 聊天机器人、智能问答、工单自动化
4. **内容创作：** 文案生成、图像生成、音乐创作、代码生成 (生成式AI)
5. **智能产品与服务：** 智能家居、自动驾驶、智能医疗
:::

### 2. Python 机器学习环境搭建

::: {.callout-important}
## Python 解释器安装
1. **从 Python 官网下载并安装 Python 解释器：** [https://www.python.org/downloads/](https://www.python.org/downloads/) (建议安装 3.9 及以上版本)
2. **安装过程中，务必勾选 "Add Python to PATH"**
3. **验证安装：** 打开命令行，输入 `python --version` 和 `pip --version`
:::

::: {.callout-note}
## VS Code 编辑器安装与配置
1. **安装 VS Code：** [https://code.visualstudio.com/download](https://code.visualstudio.com/download)
2. **安装 Python 插件：**
   - 打开 VS Code，点击左侧 "Extensions" 图标
   - 搜索并安装 "Python" 插件 (由 Microsoft 提供)
   - **功能：** 代码智能提示、格式化、调试、Jupyter Notebook 支持等
3. **选择 Python 解释器：**
   - 点击窗口右下角的 Python 版本号
   - 或使用 `Ctrl+Shift+P` / `Cmd+Shift+P` 选择解释器
:::

::: {.callout-warning}
## 虚拟环境管理
**什么是虚拟环境：** 隔离的 Python 环境，可以为不同项目安装不同的 Python 包，避免包版本冲突。

1. **创建虚拟环境：** `python -m venv .venv`
2. **激活虚拟环境：**
   - Windows (cmd): `.venv\Scripts\activate.bat`
   - Windows (PowerShell): `.venv\Scripts\Activate.ps1`
   - macOS/Linux: `source .venv/bin/activate`
3. **在 VS Code 中使用：** VS Code 会自动检测项目中的虚拟环境
:::

::: {.callout-tip}
## Python 常用库安装
在虚拟环境中安装以下库：
```bash
pip install scikit-learn pandas numpy matplotlib seaborn
```

**配置 pip 国内镜像源 (推荐)：**

1. 创建配置文件：

   - Windows: `%USERPROFILE%\pip\pip.ini`
   - macOS/Linux: `~/.pip/pip.conf`
2. 添加配置内容：
```ini
[global]
index-url = https://pypi.tuna.tsinghua.edu.cn/simple
[install]
trusted-host = pypi.tuna.tsinghua.edu.cn
```
:::

::: {.callout-note}
## AI 辅助编程工具体验
- **GitHub Copilot:** [github.com/features/copilot](https://github.com/features/copilot)
- **通义灵码:** [tongyi.aliyun.com/lingma](https://tongyi.aliyun.com/lingma)
- **Cursor:** [cursor.sh](https://cursor.sh/)
:::

## 第二次课：Python 基础语法与数据操作

::: {.callout-tip}
## 课程目标
- 回顾 Python 基础语法
- 掌握 `Numpy` 库的基本操作
- 掌握 `Pandas` 库的基本操作
- 能够使用 AI 辅助编程工具完成编程练习
:::

### 1. Python 基础语法回顾

::: {.callout-important}
## 基础语法要点

#### 变量与数据类型
- 变量命名规则、动态类型
- 常用数据类型：`int`, `float`, `str`, `bool`, `list`, `tuple`, `dict`, `set`

#### 运算符
- 算术运算符
- 比较运算符
- 逻辑运算符
- 赋值运算符
- 成员运算符
- 身份运算符

#### 控制流
- 条件语句：`if`, `elif`, `else`
- 循环语句：`for`, `while`, `break`, `continue`

#### 函数
- 函数定义
- 函数参数
- 函数返回值
- 匿名函数 (lambda)

#### 模块与包
- 模块导入：`import`, `from ... import ...`
- 常用内置模块：`math`, `random`, `os`, `sys`, `datetime`
:::

### 2. Numpy 基础

::: {.callout-note}
## Numpy 数组操作
#### 数组创建
- `np.array()`, `np.zeros()`, `np.ones()`
- `np.arange()`, `np.linspace()`
- `np.random.rand()`

#### 数组属性
- `shape`, `dtype`, `ndim`, `size`
- 数组索引和切片
- 维度变换：`reshape()`, `flatten()`, `transpose()`
:::

::: {.callout-important}
## 数组运算
- **元素级运算：** 加减乘除、幂运算、比较运算
- **矩阵运算：** 矩阵乘法 (`np.dot()`, `@` 运算符)
- **广播机制**

#### 常用函数
- **数学函数：** `np.sin()`, `np.cos()`, `np.exp()`, `np.log()`, `np.sqrt()`
- **统计函数：** `np.mean()`, `np.median()`, `np.std()`, `np.max()`, `np.min()`, `np.sum()`
- **排序和查找：** `np.sort()`, `np.argsort()`, `np.unique()`, `np.where()`
:::

### 3. Pandas 基础

::: {.callout-important}
## Pandas 数据结构
#### Series
- 带标签的一维数组
- 创建、索引、切片、属性和方法

#### DataFrame
- 带标签的二维数据表
- 创建、列选择、行选择、索引、切片
- 常用属性和方法
:::

::: {.callout-note}
## 数据操作
#### 数据读取
- `pd.read_csv()`: 读取 CSV 文件
- `pd.read_excel()`: 读取 Excel 文件
- `pd.read_json()`: 读取 JSON 文件
- 常用参数：`filepath_or_buffer`, `sep`, `header`, `index_col`, `encoding`

#### 数据选择
- 列选择：`df['列名']`, `df[['列名1', '列名2']]`
- 行选择：`df.loc[]`, `df.iloc[]`, 条件索引
- 索引方式的区别和应用场景

#### 数据清洗
- 重复值处理：`df.duplicated()`, `df.drop_duplicates()`
- 缺失值处理：`df.isnull()`, `df.fillna()`, `df.dropna()`
:::

::: {.callout-tip}
## 实践环节
1. **Python 基础语法练习**
2. **Numpy 数组操作练习**
3. **Pandas 数据操作练习**
4. **使用 AI 工具辅助完成代码**
:::

::: {.callout-important}
## 课后作业
1. 完成 Python 基础语法和数据操作的编程练习
2. 将代码上传到 GitHub 仓库
3. 预习下周课程内容：数据预处理与特征工程基础
:::

::: {.callout-note}
## 相关资源
- [Python 官方文档](https://docs.python.org/3/)
- [Numpy 官方文档](https://numpy.org/doc/stable/)
- [Pandas 官方文档](https://pandas.pydata.org/docs/)
- [W3School Python 教程](https://www.w3schools.com/python/)
- [廖雪峰 Python 教程](https://www.liaoxuefeng.com/wiki/1016959663602400)
:::

